/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package rreader.gui;

import com.ning.http.client.ListenableFuture;
import java.awt.Desktop;
import java.io.IOException;
import java.net.URI;
import java.net.URISyntaxException;
import java.util.List;
import java.util.concurrent.ExecutionException;
import java.util.concurrent.Executors;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.event.DocumentListener;
import javax.swing.event.UndoableEditListener;
import javax.swing.text.AttributeSet;
import javax.swing.text.BadLocationException;
import javax.swing.text.Document;
import javax.swing.text.Element;
import javax.swing.text.PlainDocument;
import javax.swing.text.Position;
import javax.swing.text.Segment;
import javax.swing.text.html.HTMLDocument;
import rreader.Post;
import rreader.Reddit;

/**
 *
 * @author leohonka
 */
public final class AppWindow extends javax.swing.JFrame {

    /**
     * Creates new form AppWindow
     */
    public Reddit reddit;
    public List<Post> posts;
    public int post_index = 0;
    public String reddit_name = "programming";
    
    public AppWindow(Reddit reddit) {
        initComponents();
        this.reddit = reddit;
        setRedditName("programming");
    }
    
    public void loadPosts(String reddit_name) {
        try {
            // load some posts
            final ListenableFuture<List<Post>> posts_future = reddit.get_posts(reddit_name);
            posts_future.addListener(new InitialPostHandler(posts_future), reddit.executor);
            posts_future.addListener(new PostTitleHandler(), reddit.executor);
        } catch (IOException ex) {
            Logger.getLogger(AppWindow.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
    
    public void setRedditName(String reddit_name) {
        this.reddit_name = reddit_name;
        loadPosts(reddit_name);
        setTitle("Rreader - reading from /r/" + reddit_name);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        NextButton = new javax.swing.JButton();
        BrowserButton = new javax.swing.JButton();
        jScrollPane4 = new javax.swing.JScrollPane();
        TitlePane = new javax.swing.JTextArea();
        jScrollPane1 = new javax.swing.JScrollPane();
        BlurbPane = new javax.swing.JTextArea();
        menuBar = new javax.swing.JMenuBar();
        fileMenu = new javax.swing.JMenu();
        openMenuItem = new javax.swing.JMenuItem();
        exitMenuItem = new javax.swing.JMenuItem();
        helpMenu = new javax.swing.JMenu();
        contentsMenuItem = new javax.swing.JMenuItem();
        aboutMenuItem = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        NextButton.setText("Next");
        NextButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                NextButtonActionPerformed(evt);
            }
        });

        BrowserButton.setText("Open in Browser");
        BrowserButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BrowserButtonActionPerformed(evt);
            }
        });

        TitlePane.setEditable(false);
        TitlePane.setColumns(20);
        TitlePane.setFont(new java.awt.Font("Ubuntu", 0, 24)); // NOI18N
        TitlePane.setLineWrap(true);
        TitlePane.setRows(5);
        TitlePane.setFocusable(false);
        jScrollPane4.setViewportView(TitlePane);

        BlurbPane.setEditable(false);
        BlurbPane.setColumns(20);
        BlurbPane.setLineWrap(true);
        BlurbPane.setRows(5);
        jScrollPane1.setViewportView(BlurbPane);

        fileMenu.setMnemonic('f');
        fileMenu.setText("File");

        openMenuItem.setMnemonic('o');
        openMenuItem.setText("Open Subreddit");
        openMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                openMenuItemActionPerformed(evt);
            }
        });
        fileMenu.add(openMenuItem);

        exitMenuItem.setMnemonic('x');
        exitMenuItem.setText("Exit");
        exitMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exitMenuItemActionPerformed(evt);
            }
        });
        fileMenu.add(exitMenuItem);

        menuBar.add(fileMenu);

        helpMenu.setMnemonic('h');
        helpMenu.setText("Help");

        contentsMenuItem.setMnemonic('c');
        contentsMenuItem.setText("Contents");
        helpMenu.add(contentsMenuItem);

        aboutMenuItem.setMnemonic('a');
        aboutMenuItem.setText("About");
        helpMenu.add(aboutMenuItem);

        menuBar.add(helpMenu);

        setJMenuBar(menuBar);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(NextButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(BrowserButton)
                        .addGap(0, 475, Short.MAX_VALUE))
                    .addComponent(jScrollPane4)
                    .addComponent(jScrollPane1))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 83, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(NextButton)
                    .addComponent(BrowserButton))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void exitMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exitMenuItemActionPerformed
        System.exit(0);
    }//GEN-LAST:event_exitMenuItemActionPerformed

    private void openMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_openMenuItemActionPerformed
        RedditDialog diag = new RedditDialog(this, true);
        diag.setVisible(true);
    }//GEN-LAST:event_openMenuItemActionPerformed

    private void NextButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_NextButtonActionPerformed
        post_index++;
        if (post_index < posts.size()) {
            new PostTitleHandler().run();
        }
    }//GEN-LAST:event_NextButtonActionPerformed

    private void BrowserButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BrowserButtonActionPerformed
        // TODO add your handling code here:
        Desktop desktop = Desktop.getDesktop();
        try {
            desktop.browse(new URI(posts.get(post_index).url));
        } catch (URISyntaxException ex) {
            new ErrorDialog(this, true, "The URI for this post could not be opened.");
        } catch (IOException ex) {
            // ;;
        }
    }//GEN-LAST:event_BrowserButtonActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(AppWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(AppWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(AppWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(AppWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            @Override
            public void run() {
                new AppWindow(new Reddit(Executors.newCachedThreadPool())).setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextArea BlurbPane;
    private javax.swing.JButton BrowserButton;
    private javax.swing.JButton NextButton;
    private javax.swing.JTextArea TitlePane;
    private javax.swing.JMenuItem aboutMenuItem;
    private javax.swing.JMenuItem contentsMenuItem;
    private javax.swing.JMenuItem exitMenuItem;
    private javax.swing.JMenu fileMenu;
    private javax.swing.JMenu helpMenu;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JMenuBar menuBar;
    private javax.swing.JMenuItem openMenuItem;
    // End of variables declaration//GEN-END:variables

    private class InitialPostHandler implements Runnable {

        private final ListenableFuture<List<Post>> posts_future;

        public InitialPostHandler(ListenableFuture<List<Post>> posts_future) {
            this.posts_future = posts_future;
        }

        @Override
        public void run() {
            try {
                posts = posts_future.get();
            } catch (InterruptedException | ExecutionException ex) {
                Logger.getLogger(AppWindow.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }
            
    private class PostTitleHandler implements Runnable {
        /* PostTitleHandler updates the GUI text fields to show the currently 
         selected post. The blurb field is asynchronously fetched if necessary. 
         */
        
        @Override
        public void run() {
            Post post = posts.get(post_index);
            set_title(post);
            post.get_text_content(reddit).addListener(
                    new PostBlurbHandler(), reddit.executor);
        }
        
        public void set_title(Post post) {
            Document title_doc = new HTMLDocument();
            try {
                title_doc.insertString(0, post.title, null);
            } catch (BadLocationException ex) {
                Logger.getLogger(AppWindow.class.getName()).log(Level.SEVERE, null, ex);
            }
            TitlePane.setDocument(title_doc);
        }
    }
    
    private class PostBlurbHandler implements Runnable {

        public PostBlurbHandler() {
        }

        @Override
        public void run() {
            Post post = posts.get(post_index);
            Document blurb_doc = new HTMLDocument();
            try {
                blurb_doc.insertString(0, post.text_content, null);
            } catch (BadLocationException ex) {
                Logger.getLogger(AppWindow.class.getName()).log(Level.SEVERE, null, ex);
            }
            BlurbPane.setDocument(blurb_doc);
        }
    }
}
